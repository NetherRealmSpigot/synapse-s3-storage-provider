name: Integration test
on:
  push:
    branches:
      - main
  workflow_dispatch:

defaults:
  run:
    shell: bash

env:
  TEST_S3_ACCESS_KEY: testadmin
  TEST_S3_SECRET_KEY: testadmin123456
  PACKAGE_NAME: synapse-s3

jobs:
  test-matrix-localhost-minio-container:
    runs-on: ubuntu-latest
    timeout-minutes: 5

    permissions:
      contents: read
      packages: read

    services:
      minio:
        image: ghcr.io/netherrealmspigot/gha-reusable-minio:nightly
        ports:
          - 9000:9000
        env:
          MINIO_ROOT_USER: ${{ env.TEST_S3_ACCESS_KEY }}
          MINIO_ROOT_PASSWORD: ${{ env.TEST_S3_SECRET_KEY }}
        volumes:
          - /tmp/data:/data
          - /tmp/config:/root/.minio
        options: >-
          --health-cmd "curl -I http://127.0.0.1:9000/minio/health/live"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout
        uses: "actions/checkout@v4"

      - name: Setup Python
        uses: "actions/setup-python@v5"
        with:
          python-version: "3.x"

      - name: Run synapse
        uses: NetherRealmSpigot/setup-matrix-synapse@main
        with:
          installer: "pip"
          httpPort: 8008
          customModules: "git+${{ github.server_url }}/${{ github.repository }}.git#egg=synapse-s3-storage-provider"
          customConfig: |
            registration_shared_secret: QuadraticPeach
            media_storage_providers:
              - module: s3_storage_provider.S3StorageProviderBackend
                store_local: True
                store_remote: True
                store_synchronous: True
                config:
                  bucket: s3-storage-provider-tester
                  endpoint_url: http://127.0.0.1:9000/
                  access_key_id: ${{ env.TEST_S3_ACCESS_KEY }}
                  secret_access_key: ${{ env.TEST_S3_SECRET_KEY }}
                  addressing_style: path
          uploadLogs: true
          artifactName: synapse-log-test-${{ github.run_id }}-${{ github.run_attempt }}
          artifactRetentionDays: 1

      - name: Run
        env:
          AWS_ACCESS_KEY_ID: ${{ env.TEST_S3_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ env.TEST_S3_SECRET_KEY }}
          AWS_EC2_METADATA_DISABLED: "true"
          TEST_MATRIX_USERNAME: test
          TEST_MATRIX_PASSWORD: test
        run: |
          aws --endpoint-url http://127.0.0.1:9000/ s3 mb s3://s3-storage-provider-tester
          
          # Register and login 
          synapse/env/bin/register_new_matrix_user -k QuadraticPeach -u ${{ env.TEST_MATRIX_USERNAME }} -p ${{ env.TEST_MATRIX_PASSWORD }} --no-admin http://127.0.0.1:8008
          access_token=`curl -q -L --verbose -X POST -d '{"type":"m.login.password", "user":"${{ env.TEST_MATRIX_USERNAME }}", "password":"${{ env.TEST_MATRIX_PASSWORD }}"}' "http://127.0.0.1:8008/_matrix/client/r0/login" | jq -r .access_token`
          echo "::add-mask::$access_token"
          
          set -x
          # Upload file to synapse
          mxc=`curl -q -L --verbose -H "Authorization: Bearer $access_token" http://127.0.0.1:8008/_matrix/media/v3/upload --data-binary @s3_storage_provider.py | jq -r .content_uri`
          server_name=`echo $mxc | sed 's^mxc://\(.*\)/.*^\1^'`
          media_id=`echo $mxc | sed 's^mxc://.*/\(.*\)^\1^'`
          
          # Downloading uploaded file
          curl -q -o round_trip -L --verbose -H "Authorization: Bearer $access_token" http://127.0.0.1:8008/_matrix/client/v1/media/download/${server_name}/${media_id}?allow_redirect=true
          # Verify file against original
          sudo diff round_trip s3_storage_provider.py
          sudo rm -rf round_trip

  build-image:
    needs: test-matrix-localhost-minio-container
    runs-on: ubuntu-latest
    timeout-minutes: 5

    permissions:
      contents: read
      packages: write
      id-token: write

    outputs:
      digest: ${{ steps.build-push.outputs.digest }}
      image: ${{ steps.env-setup.outputs.docker_base_image }}
      tag: ${{ steps.env-setup.outputs.docker_tag }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Setup
        id: env-setup
        run: |
          docker_base_image="ghcr.io/${{ github.repository_owner }}/${{ env.PACKAGE_NAME }}"
          docker_base_image=$(echo $docker_base_image | tr '[:upper:]' '[:lower:]')
          echo "docker_base_image=$docker_base_image" >> $GITHUB_OUTPUT

          docker_tag="nightly"
          echo "docker_tag=$docker_tag" >> $GITHUB_OUTPUT

      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.env-setup.outputs.docker_base_image }}
          tags: ${{ steps.env-setup.outputs.docker_tag }}

      - name: Build and push
        uses: docker/build-push-action@v5
        id: build-push
        with:
          context: .
          build-args: |
            SYNAPSE_VERSION=latest
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  clean-image:
    needs: build-image
    runs-on: ubuntu-latest
    timeout-minutes: 2

    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - uses: NorthRealm/reusable-actions/delete-untagged-ghcr-action@main
        with:
          package_name: ${{ env.PACKAGE_NAME }}
        continue-on-error: true